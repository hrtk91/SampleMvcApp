@using Microsoft.AspNetCore.Identity
@using SampleMvcApp.Controllers

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    var IdentityUser = await UserManager.GetUserAsync(User);
}

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link text-dark"
            asp-controller="@(ControllerHelper.NameOf<UserController>())"
            asp-action="@nameof(UserController.Edit)"
            asp-route-id="@IdentityUser.Id"
            title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-controller="@(ControllerHelper.NameOf<UserController>())" asp-action="@nameof(UserController.Logout)" asp-route-returnUrl='@Url.Action(nameof(ProductController.Index), ControllerHelper.NameOf<ProductController>())'>
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-controller="@(ControllerHelper.NameOf<UserController>())" asp-action="@nameof(UserController.Create)" asp-method="get">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-controller="@(ControllerHelper.NameOf<UserController>())" asp-action="@nameof(UserController.Login)">Login</a>
    </li>
}
</ul>
